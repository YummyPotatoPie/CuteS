<id>                ::= ([_a-zA-Z][_a-zA-Z0-9])
<number>            ::= (("0"("."[0-9]+)?)|[1-9][0-9]*("."[0-9]+)?)
<literal>           ::= '"' <any-symbol> '"'

<program>		    ::= <imports> <namespace>

<imports>		    ::= <import> <imports> | ""
<import>            ::= "import" <literal> ";" | "import" "<" <id> ">" ";" | "" 

<namespace>		    ::= "namespace" <id> "{" <classes> "}"
<classes>		    ::= <class> <classes> | ""
<class>			    ::= "class" <id> "{" <class-body> "}"
<class-body>	    ::= <declaration> <class-body> | <function> <class-body> | ""

<declaration>       ::= "let" <type> ":" <assign-expression> ";"
<type>              ::= <id> "." <id> | <id> | <primitive-type>
<primitive-type>    ::= "int" | "float" | "string" | "void" | "bool"

<function>          ::= "fn" <type> ":" <id> "(" <args> ")" "{" <statements "}"
<args>              ::= <arg> "," <args> | <arg> | ""
<arg>               ::= <type> ":" <id>

<statements>        ::= <statement> <statements> | ""
<statement>         ::= <if-statement>      |
                        <while-statement>   |
                        <for-statement>     |
                        <return-statement>  |
                        <declaration>       |
                        <assign-expression>

<if-statement>      ::= "if" "(" <value-expression> ")" "{" <statements> "}" <else>
<else>              ::= "else" <if-statement> | "else" "{" <statements> "}" | ""

<while-statement>   ::= "while" "(" <value-expression> ")" "{" <statements> "}" 

<for-statement>     ::= "for" "(" <iterator> ";" <value-expression> ";" <assign-expression> ")" "{" <statements> "}"
<iterator>          ::= <declaration> | <assign-expression>

<return-statement>  ::= "return" <value-expression> ";"

<assign-expression> ::= <lvalue> <assign-operator> <value-expression>

<lvalue>            ::= <id> "." <lvalue> | <id>
<assign-operator>   ::= "=" | "+=" | "-=" | "/=" | "*=" | "%=" | "&=" | "|=" | ">>=" | "<<=" | "^="

<value-expression>  ::= <bool-or-term>

<bool-or-term>      ::= <bool-or-term> "||" <bool-and-term> | <bool-and-term>
<bool-and-term>     ::= <bool-and-term> "&&" <bit-or-term> | <bit-or-term>
<bit-or-term>       ::= <bit-or-term> "|" <bit-xor-term> | <bit-xor-term>
<bit-xor-term>      ::= <bit-xor-term> "^" <bit-and-term> | <bit-and-term>
<bit-and-term>      ::= <bit-and-term> "&" <rel-term> | <rel-term>
<rel-term>          ::= <rel-term> "==" <rel-eq-term> | 
                        <rel-term> "!=" <rel-eq-term> |
                        <rel-eq-term>
<rel-eq-term>       ::= <rel-eq-term> "<" <shift-term>  | 
                        <rel-eq-term> ">" <shift-term>  |
                        <rel-eq-term> "<=" <shift-term> |
                        <rel-eq-term> ">=" <shift-term> |
                        <shift-term>
<shift-term>        ::= <shift-term> ">>" <add-term> |
                        <shift-term> "<<" <add-term> |
                        <add-term>
<add-term>          ::= <add-term> "+" <mult-term> |
                        <add-term> "-" <mult-term> |
                        <mult-term>
<mult-term>         ::= <mult-term> "*" <unary-term> |
                        <mult-term> "/" <unary-term> |
                        <mult-term> "%" <unary-term>
<unary-term>        ::= "!" <unary> |
                        "-" <unary> |
                        "+" <unary> |
                        "~" <unary> |
                        <factor>
<factor>            ::= "(" <bool-or-term> ")" | <number> | <literal> | <id-call> 
<id-call>           ::= <id-call-term> "." <id-call> | <id-call-term>
<id-call-term>      ::= <id> | <function-call>
<function-call>     ::= <id> "(" <args-values> ")"
<args-values>       ::= <value-expression> "," <args-values> | <value-expression>
